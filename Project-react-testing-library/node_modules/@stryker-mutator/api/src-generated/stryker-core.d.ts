/**
 * This file was automatically generated by generate-json-schema-to-ts.js.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source file JSON file: stryker-core.json,
 * and run 'npm run generate' from monorepo base directory.
 */
export declare type Percentage = number;
/**
 * JSON schema for the Stryker Mutator configuration file
 */
export interface StrykerOptions {
    /**
     * The 'allowConsoleColors' value indicates whether Stryker should use colors in console.
     */
    allowConsoleColors: boolean;
    commandRunner: CommandRunnerOptions;
    /**
     * Indicates which coverage analysis strategy to use. During mutation testing, stryker will try to only run the tests that cover a particular line of code.
     *
     * 'perTest': Analyse coverage per test.
     * 'all': Analyse the coverage for the entire test suite.
     * 'off' (default): Don't use coverage analysis
     */
    coverageAnalysis: 'off' | 'all' | 'perTest';
    clearTextReporter: ClearTextReporterOptions;
    dashboard: DashboardOptions;
    eventReporter: EventRecorderOptions;
    fileLogLevel: LogLevel;
    /**
     * With `files` you can choose which files should be included in your test runner sandbox.
     * This is normally not needed as it defaults to all files not ignored by git.
     * Try it out yourself with this command: `git ls-files --others --exclude-standard --cached --exclude .stryker-tmp`.
     *
     * If you do need to override `files` (for example: when your project does not live in a git repository),
     * you can override the files here.
     *
     * When using the command line, the list can only contain a comma separated list of globbing expressions.
     * When using the config file you can provide an array with `string`s
     */
    files?: string[];
    logLevel: LogLevel;
    /**
     * Specifies the maximum number of concurrent test runners to spawn. Mutation testing is time consuming. By default, Stryker tries to make the most of your CPU's, by spawning as many test runners as you have CPU cores (`Number.MAX_SAFE_INTEGER`).
     */
    maxConcurrentTestRunners: number;
    /**
     * With mutate you configure the subset of files to use for mutation testing. Generally speaking, these should be your own source files.
     */
    mutate: string[];
    /**
     * With mutator you configure which mutator plugin you want to use, and optionally, which mutation types to exclude from the test run.
     */
    mutator: string | MutatorDescriptor;
    /**
     * The package manager Stryker can use to install missing dependencies.
     */
    packageManager?: 'npm' | 'yarn';
    /**
     * With 'plugins', you can add additional Node modules for Stryker to load (or require). By default, all node_modules starting with @stryker-mutator/* will be loaded, so you would normally not need to specify this option. These modules should be installed right next to stryker. For a current list of plugins, you can consult 'npm' or 'stryker-mutator.io.'
     */
    plugins: string[];
    /**
     * With reporters, you can set the reporters for stryker to use.
     */
    reporters: string[];
    htmlReporter?: HtmlReporterOptions;
    /**
     * The 'symlinkNodeModules' value indicates whether Stryker should create a symbolic link to your current node_modules directory in the sandbox directories. This makes running your tests by Stryker behave more like your would run the tests yourself in your project directory. Only disable this setting if you really know what you are doing.
     */
    symlinkNodeModules: boolean;
    /**
     * Choose a different temp dir that Stryker uses for mutation testing. This directory will contain copies of your source code during a mutation test run. It will be created if it not exists and is *entirely deleted* after a successful run, so change this with caution.
     */
    tempDirName: string;
    /**
     * Configure which test framework you are using. This option is not mandatory, as Stryker is test framework agnostic (it doesn't care what framework you use), However, it is required when coverageAnalysis is set to 'perTest', because Stryker needs to hook into the test framework in order to measure code coverage results per test and filter tests to run.
     */
    testFramework?: string;
    /**
     * With 'testRunner' you specify the test runner that Stryker uses to run your tests. The default value is command. The command runner runs a configurable bash/cmd command and bases the result on the exit code of that program (0 for success, otherwise failed). You can configure this command via the config file using the 'commandRunner: { command: 'npm run mocha' }'. It uses 'npm test' as the command by default.
     */
    testRunner: string;
    thresholds: MutationScoreThresholds;
    /**
     * Configure the allowed timeout deviation relative to the time of a normal test run. Tweak this if you notice that mutants are prone to creating slower code, but not infinite loops (for that, use `timeoutMS`)
     */
    timeoutFactor: number;
    /**
     * Configure an absolute timeout deviation. Tweak this if you run Stryker on a busy machine and you need to wait longer to make sure that the code indeed entered an infinite loop.
     */
    timeoutMS: number;
    /**
     * Configure which transpiler plugins should transpile the code before it's executed. This is an array where the transpilers are called in the other of the array. This defaults to an empty array meaning no transpilation will be done.
     */
    transpilers: string[];
    /**
     * Enable or disable certain warnings
     */
    warnings: boolean | WarningOptions;
    [k: string]: unknown;
}
export interface CommandRunnerOptions {
    /**
     * The command to test each mutant. For example "npm run mocha". Defaults to "npm test".
     */
    command: string;
    [k: string]: unknown;
}
export interface ClearTextReporterOptions {
    /**
     * Indicates whether or not to use color coding in output.
     */
    allowColor: boolean;
    /**
     * Indicates whether or not to log which tests were executed for a given mutant.
     */
    logTests: boolean;
    /**
     * Indicates the maximum amount of test to log when `logTests` is enabled
     */
    maxTestsToLog: number;
    [k: string]: unknown;
}
export interface DashboardOptions {
    /**
     * Indicates which project to use if the "dashboard" reporter is enabled.
     */
    project?: string;
    /**
     * Indicates which version to use if the "dashboard" reporter is enabled.
     */
    version?: string;
    /**
     * Indicates which module to use if the "dashboard" reporter is enabled.
     */
    module?: string;
    /**
     * Indicates the base url of the stryker dashboard.
     */
    baseUrl: string;
    reportType: ReportType;
}
export interface EventRecorderOptions {
    /**
     * The base dir to write the events to
     */
    baseDir: string;
}
export interface MutatorDescriptor {
    name: string;
    plugins: (string | unknown[])[] | null;
    excludedMutations: string[];
}
export interface HtmlReporterOptions {
    /**
     * The output folder for the html report.
     */
    baseDir: string;
}
export interface MutationScoreThresholds {
    high: Percentage;
    low: Percentage;
    break: null | Percentage;
}
export interface WarningOptions {
    /**
     * decide whether or not to log warnings when additional stryker options are configured
     */
    unknownOptions: boolean;
    [k: string]: unknown;
}
export declare const enum ReportType {
    Full = "full",
    MutationScore = "mutationScore"
}
export declare const enum LogLevel {
    Off = "off",
    Fatal = "fatal",
    Error = "error",
    Warning = "warn",
    Information = "info",
    Debug = "debug",
    Trace = "trace"
}
//# sourceMappingURL=stryker-core.d.ts.map