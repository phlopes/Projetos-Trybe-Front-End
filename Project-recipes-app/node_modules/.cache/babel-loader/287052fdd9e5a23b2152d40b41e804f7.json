{"ast":null,"code":"var _jsxFileName = \"/home/phlopes/Projetos/sd-010-a-project-recipes-app/src/pages/RecipeDetails/Ingredients.js\";\nimport React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nexport default function Ingredients({\n  recipe\n}) {\n  const [ingredients, setIngredients] = useState([]);\n\n  function getIngredients() {\n    return Object.entries(recipe).filter(property => property[0].includes('strIngredient') && property[1]);\n  }\n\n  function getMeasures() {\n    const measuresList = Object.entries(recipe).filter(property => {\n      const checkKey = property[0].includes('strMeasure');\n      const checkValue = property[1];\n      return checkKey && checkValue;\n    });\n    return measuresList;\n  }\n\n  useEffect(() => {\n    setIngredients(getIngredients());\n  }, [recipe]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }\n  }, \"Ingredients\"), /*#__PURE__*/React.createElement(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }\n  }, ingredients.length ? ingredients.map((ingredient, index) => /*#__PURE__*/React.createElement(\"li\", {\n    key: index,\n    \"data-testid\": `${index}-ingredient-name-and-measure`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 15\n    }\n  }, `${ingredient[1]} - ${getMeasures()[index][1]}`)) : ''));\n}\nIngredients.propTypes = {\n  recipe: PropTypes.objectOf(PropTypes.string).isRequired\n};","map":{"version":3,"sources":["/home/phlopes/Projetos/sd-010-a-project-recipes-app/src/pages/RecipeDetails/Ingredients.js"],"names":["React","useEffect","useState","PropTypes","Ingredients","recipe","ingredients","setIngredients","getIngredients","Object","entries","filter","property","includes","getMeasures","measuresList","checkKey","checkValue","length","map","ingredient","index","propTypes","objectOf","string","isRequired"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,SAAP,MAAsB,YAAtB;AAEA,eAAe,SAASC,WAAT,CAAqB;AAAEC,EAAAA;AAAF,CAArB,EAAiC;AAC9C,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCL,QAAQ,CAAC,EAAD,CAA9C;;AAEA,WAASM,cAAT,GAA0B;AACxB,WAAOC,MAAM,CAACC,OAAP,CAAeL,MAAf,EACJM,MADI,CACIC,QAAD,IACNA,QAAQ,CAAC,CAAD,CAAR,CAAYC,QAAZ,CAAqB,eAArB,KAAyCD,QAAQ,CAAC,CAAD,CAF9C,CAAP;AAGD;;AAED,WAASE,WAAT,GAAuB;AACrB,UAAMC,YAAY,GAAGN,MAAM,CAACC,OAAP,CAAeL,MAAf,EAClBM,MADkB,CACVC,QAAD,IAAc;AACpB,YAAMI,QAAQ,GAAGJ,QAAQ,CAAC,CAAD,CAAR,CAAYC,QAAZ,CAAqB,YAArB,CAAjB;AACA,YAAMI,UAAU,GAAGL,QAAQ,CAAC,CAAD,CAA3B;AACA,aAAOI,QAAQ,IAAIC,UAAnB;AACD,KALkB,CAArB;AAMA,WAAOF,YAAP;AACD;;AAEDd,EAAAA,SAAS,CAAC,MAAM;AACdM,IAAAA,cAAc,CAACC,cAAc,EAAf,CAAd;AACD,GAFQ,EAEN,CAACH,MAAD,CAFM,CAAT;AAIA,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACIC,WAAW,CAACY,MAAZ,GACEZ,WAAW,CAACa,GAAZ,CACA,CAACC,UAAD,EAAaC,KAAb,kBACE;AACE,IAAA,GAAG,EAAGA,KADR;AAEE,mBAAe,GAAEA,KAAM,8BAFzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAII,GAAED,UAAU,CAAC,CAAD,CAAI,MAAKN,WAAW,GAAGO,KAAH,CAAX,CAAqB,CAArB,CAAwB,EAJjD,CAFF,CADF,GASI,EAVR,CAFF,CADF;AAiBD;AAEDjB,WAAW,CAACkB,SAAZ,GAAwB;AACtBjB,EAAAA,MAAM,EAAEF,SAAS,CAACoB,QAAV,CAAmBpB,SAAS,CAACqB,MAA7B,EAAqCC;AADvB,CAAxB","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\n\nexport default function Ingredients({ recipe }) {\n  const [ingredients, setIngredients] = useState([]);\n\n  function getIngredients() {\n    return Object.entries(recipe)\n      .filter((property) => (\n        property[0].includes('strIngredient') && property[1]));\n  }\n\n  function getMeasures() {\n    const measuresList = Object.entries(recipe)\n      .filter((property) => {\n        const checkKey = property[0].includes('strMeasure');\n        const checkValue = property[1];\n        return checkKey && checkValue;\n      });\n    return measuresList;\n  }\n\n  useEffect(() => {\n    setIngredients(getIngredients());\n  }, [recipe]);\n\n  return (\n    <div>\n      <h3>Ingredients</h3>\n      <ul>\n        { ingredients.length\n          ? ingredients.map(\n            (ingredient, index) => (\n              <li\n                key={ index }\n                data-testid={ `${index}-ingredient-name-and-measure` }\n              >\n                {`${ingredient[1]} - ${getMeasures()[index][1]}`}\n              </li>),\n          ) : ''}\n      </ul>\n    </div>\n  );\n}\n\nIngredients.propTypes = {\n  recipe: PropTypes.objectOf(PropTypes.string).isRequired,\n};\n"]},"metadata":{},"sourceType":"module"}