{"ast":null,"code":"var _jsxFileName = \"/home/phlopes/Projetos/sd-010-a-project-recipes-app/src/pages/RecipesProgress/Ingredients.js\";\nimport React, { useCallback, useEffect, useState, useRef, useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport './Ingredients.css';\nimport { AppContext } from '../../context/AppContext';\nexport default function Ingredients({\n  recipe\n}) {\n  const [textInput, setTextInput] = useState('');\n  const [recipeId, setRecipeId] = useState('');\n  const [recipeIngredients, setRecipeIngredients] = useState('');\n  const [fromStorage, setFromStorage] = useState('');\n  const {\n    context\n  } = useContext(AppContext);\n  const {\n    setCheckedState\n  } = context;\n  const key = 'inProgressRecipes';\n  const inputRef = useRef(null);\n  const getFromStorage = useCallback(() => {\n    const storageValue = localStorage.getItem(key);\n\n    if (storageValue) {\n      const result = JSON.parse(storageValue);\n      const values = Object.values(result);\n      setFromStorage(values[0]);\n    }\n  }, []);\n  const handleCheckbox = useCallback(() => {\n    let checkBoxCounter = 0;\n    const inputCheckbox = inputRef.current.querySelectorAll('.checkbox');\n    inputCheckbox.forEach(input => {\n      if (input.checked === true) {\n        checkBoxCounter += 1;\n      }\n\n      if (checkBoxCounter === inputCheckbox.length) {\n        setCheckedState(false);\n      }\n    });\n  }, [setCheckedState]);\n  const handleInput = useCallback(({\n    target\n  }) => {\n    handleCheckbox();\n    const {\n      name\n    } = target;\n\n    if (target.checked) {\n      setTextInput([...textInput, name]);\n    }\n  }, [textInput, handleCheckbox]);\n  const getIngredients = useCallback(() => {\n    const ingredients = Object.entries(recipe).filter(property => property[0].includes('strIngredient') && property[1]);\n    setRecipeIngredients(ingredients);\n  }, [recipe]);\n  useEffect(() => {\n    const toStorage = {\n      [recipeId]: textInput\n    };\n\n    if (textInput.length > 0) {\n      localStorage.setItem(key, JSON.stringify(toStorage));\n    }\n  }, [textInput, recipeId]);\n  useEffect(() => {\n    setRecipeId(recipe.idMeal || recipe.idDrink);\n  }, [recipeId, recipe.idMeal, recipe.idDrink]);\n  useEffect(() => {\n    getIngredients();\n    getFromStorage();\n  }, [getFromStorage, getIngredients]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    ref: inputRef,\n    className: \"ingredients\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 5\n    }\n  }, recipeIngredients && recipeIngredients.map((ingredient, index) => /*#__PURE__*/React.createElement(\"div\", {\n    key: index,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    \"data-testid\": `${index}-ingredient-step`,\n    htmlFor: ingredient[1],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    className: \"checkbox\",\n    id: ingredient[1],\n    type: \"checkbox\",\n    name: `${ingredient[1]} `,\n    onClick: handleInput,\n    defaultChecked: fromStorage && fromStorage.some(value => value.includes(ingredient[1])),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 15\n    }\n  }, ingredient[1])), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 13\n    }\n  }))));\n}\nIngredients.propTypes = {\n  recipe: PropTypes.object,\n  index: PropTypes.number\n}.isRequired;","map":{"version":3,"sources":["/home/phlopes/Projetos/sd-010-a-project-recipes-app/src/pages/RecipesProgress/Ingredients.js"],"names":["React","useCallback","useEffect","useState","useRef","useContext","PropTypes","AppContext","Ingredients","recipe","textInput","setTextInput","recipeId","setRecipeId","recipeIngredients","setRecipeIngredients","fromStorage","setFromStorage","context","setCheckedState","key","inputRef","getFromStorage","storageValue","localStorage","getItem","result","JSON","parse","values","Object","handleCheckbox","checkBoxCounter","inputCheckbox","current","querySelectorAll","forEach","input","checked","length","handleInput","target","name","getIngredients","ingredients","entries","filter","property","includes","toStorage","setItem","stringify","idMeal","idDrink","map","ingredient","index","some","value","propTypes","object","number","isRequired"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,WAAhB,EAA6BC,SAA7B,EAAwCC,QAAxC,EAAkDC,MAAlD,EAA0DC,UAA1D,QAA4E,OAA5E;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAO,mBAAP;AACA,SAASC,UAAT,QAA2B,0BAA3B;AAEA,eAAe,SAASC,WAAT,CAAqB;AAAEC,EAAAA;AAAF,CAArB,EAAiC;AAC9C,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BR,QAAQ,CAAC,EAAD,CAA1C;AACA,QAAM,CAACS,QAAD,EAAWC,WAAX,IAA0BV,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAM,CAACW,iBAAD,EAAoBC,oBAApB,IAA4CZ,QAAQ,CAAC,EAAD,CAA1D;AACA,QAAM,CAACa,WAAD,EAAcC,cAAd,IAAgCd,QAAQ,CAAC,EAAD,CAA9C;AACA,QAAM;AAAEe,IAAAA;AAAF,MAAcb,UAAU,CAACE,UAAD,CAA9B;AACA,QAAM;AAAEY,IAAAA;AAAF,MAAsBD,OAA5B;AACA,QAAME,GAAG,GAAG,mBAAZ;AACA,QAAMC,QAAQ,GAAGjB,MAAM,CAAC,IAAD,CAAvB;AAEA,QAAMkB,cAAc,GAAGrB,WAAW,CAAC,MAAM;AACvC,UAAMsB,YAAY,GAAGC,YAAY,CAACC,OAAb,CAAqBL,GAArB,CAArB;;AACA,QAAIG,YAAJ,EAAkB;AAChB,YAAMG,MAAM,GAAGC,IAAI,CAACC,KAAL,CAAWL,YAAX,CAAf;AACA,YAAMM,MAAM,GAAGC,MAAM,CAACD,MAAP,CAAcH,MAAd,CAAf;AACAT,MAAAA,cAAc,CAACY,MAAM,CAAC,CAAD,CAAP,CAAd;AACD;AACF,GAPiC,EAO/B,EAP+B,CAAlC;AASA,QAAME,cAAc,GAAG9B,WAAW,CAAE,MAAM;AACxC,QAAI+B,eAAe,GAAG,CAAtB;AACA,UAAMC,aAAa,GAAGZ,QAAQ,CAACa,OAAT,CAAiBC,gBAAjB,CAAkC,WAAlC,CAAtB;AACAF,IAAAA,aAAa,CAACG,OAAd,CAAuBC,KAAD,IAAW;AAC/B,UAAIA,KAAK,CAACC,OAAN,KAAkB,IAAtB,EAA4B;AAC1BN,QAAAA,eAAe,IAAI,CAAnB;AACD;;AAAC,UAAIA,eAAe,KAAKC,aAAa,CAACM,MAAtC,EAA8C;AAC9CpB,QAAAA,eAAe,CAAC,KAAD,CAAf;AACD;AACF,KAND;AAOD,GAViC,EAU9B,CAACA,eAAD,CAV8B,CAAlC;AAYA,QAAMqB,WAAW,GAAGvC,WAAW,CAAC,CAAC;AAAEwC,IAAAA;AAAF,GAAD,KAAgB;AAC9CV,IAAAA,cAAc;AACd,UAAM;AAAEW,MAAAA;AAAF,QAAWD,MAAjB;;AACA,QAAIA,MAAM,CAACH,OAAX,EAAoB;AAClB3B,MAAAA,YAAY,CAAC,CACX,GAAGD,SADQ,EAEXgC,IAFW,CAAD,CAAZ;AAID;AACF,GAT8B,EAS5B,CAAChC,SAAD,EAAYqB,cAAZ,CAT4B,CAA/B;AAWA,QAAMY,cAAc,GAAG1C,WAAW,CAAC,MAAM;AACvC,UAAM2C,WAAW,GAAGd,MAAM,CAACe,OAAP,CAAepC,MAAf,EACjBqC,MADiB,CACTC,QAAD,IAAcA,QAAQ,CAAC,CAAD,CAAR,CAAYC,QAAZ,CAAqB,eAArB,KAAyCD,QAAQ,CAAC,CAAD,CADrD,CAApB;AAEAhC,IAAAA,oBAAoB,CAAC6B,WAAD,CAApB;AACD,GAJiC,EAI/B,CAACnC,MAAD,CAJ+B,CAAlC;AAMAP,EAAAA,SAAS,CAAC,MAAM;AACd,UAAM+C,SAAS,GAAG;AAChB,OAACrC,QAAD,GAAYF;AADI,KAAlB;;AAGA,QAAIA,SAAS,CAAC6B,MAAV,GAAmB,CAAvB,EAA0B;AACxBf,MAAAA,YAAY,CAAC0B,OAAb,CAAqB9B,GAArB,EAA0BO,IAAI,CAACwB,SAAL,CAAeF,SAAf,CAA1B;AACD;AACF,GAPQ,EAON,CAACvC,SAAD,EAAYE,QAAZ,CAPM,CAAT;AASAV,EAAAA,SAAS,CAAC,MAAM;AACdW,IAAAA,WAAW,CAACJ,MAAM,CAAC2C,MAAP,IAAiB3C,MAAM,CAAC4C,OAAzB,CAAX;AACD,GAFQ,EAEN,CAACzC,QAAD,EAAWH,MAAM,CAAC2C,MAAlB,EAA0B3C,MAAM,CAAC4C,OAAjC,CAFM,CAAT;AAIAnD,EAAAA,SAAS,CAAC,MAAM;AACdyC,IAAAA,cAAc;AACdrB,IAAAA,cAAc;AACf,GAHQ,EAGN,CAACA,cAAD,EAAiBqB,cAAjB,CAHM,CAAT;AAKA,sBACE;AAAK,IAAA,GAAG,EAAGtB,QAAX;AAAsB,IAAA,SAAS,EAAC,aAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEGP,iBAAiB,IAAIA,iBAAiB,CAACwC,GAAlB,CACpB,CAACC,UAAD,EAAaC,KAAb,kBAEE;AACE,IAAA,GAAG,EAAGA,KADR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAGE;AACE,mBAAe,GAAEA,KAAM,kBADzB;AAEE,IAAA,OAAO,EAAGD,UAAU,CAAC,CAAD,CAFtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAKE;AACE,IAAA,SAAS,EAAC,UADZ;AAEE,IAAA,EAAE,EAAGA,UAAU,CAAC,CAAD,CAFjB;AAGE,IAAA,IAAI,EAAC,UAHP;AAIE,IAAA,IAAI,EAAI,GAAEA,UAAU,CAAC,CAAD,CAAI,GAJ1B;AAKE,IAAA,OAAO,EAAGf,WALZ;AAME,IAAA,cAAc,EACZxB,WAAW,IACPA,WAAW,CAACyC,IAAZ,CAAkBC,KAAD,IAAWA,KAAK,CAACV,QAAN,CAAeO,UAAU,CAAC,CAAD,CAAzB,CAA5B,CARR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IALF,eAgBE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAOA,UAAU,CAAC,CAAD,CAAjB,CAhBF,CAHF,eAqBE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IArBF,CAHkB,CAFxB,CADF;AAiCD;AAED/C,WAAW,CAACmD,SAAZ,GAAwB;AACtBlD,EAAAA,MAAM,EAAEH,SAAS,CAACsD,MADI;AAEtBJ,EAAAA,KAAK,EAAElD,SAAS,CAACuD;AAFK,EAGtBC,UAHF","sourcesContent":["import React, { useCallback, useEffect, useState, useRef, useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport './Ingredients.css';\nimport { AppContext } from '../../context/AppContext';\n\nexport default function Ingredients({ recipe }) {\n  const [textInput, setTextInput] = useState('');\n  const [recipeId, setRecipeId] = useState('');\n  const [recipeIngredients, setRecipeIngredients] = useState('');\n  const [fromStorage, setFromStorage] = useState('');\n  const { context } = useContext(AppContext);\n  const { setCheckedState } = context;\n  const key = 'inProgressRecipes';\n  const inputRef = useRef(null);\n\n  const getFromStorage = useCallback(() => {\n    const storageValue = localStorage.getItem(key);\n    if (storageValue) {\n      const result = JSON.parse(storageValue);\n      const values = Object.values(result);\n      setFromStorage(values[0]);\n    }\n  }, []);\n\n  const handleCheckbox = useCallback((() => {\n    let checkBoxCounter = 0;\n    const inputCheckbox = inputRef.current.querySelectorAll('.checkbox');\n    inputCheckbox.forEach((input) => {\n      if (input.checked === true) {\n        checkBoxCounter += 1;\n      } if (checkBoxCounter === inputCheckbox.length) {\n        setCheckedState(false);\n      }\n    });\n  }), [setCheckedState]);\n\n  const handleInput = useCallback(({ target }) => {\n    handleCheckbox();\n    const { name } = target;\n    if (target.checked) {\n      setTextInput([\n        ...textInput,\n        name,\n      ]);\n    }\n  }, [textInput, handleCheckbox]);\n\n  const getIngredients = useCallback(() => {\n    const ingredients = Object.entries(recipe)\n      .filter((property) => property[0].includes('strIngredient') && property[1]);\n    setRecipeIngredients(ingredients);\n  }, [recipe]);\n\n  useEffect(() => {\n    const toStorage = {\n      [recipeId]: textInput,\n    };\n    if (textInput.length > 0) {\n      localStorage.setItem(key, JSON.stringify(toStorage));\n    }\n  }, [textInput, recipeId]);\n\n  useEffect(() => {\n    setRecipeId(recipe.idMeal || recipe.idDrink);\n  }, [recipeId, recipe.idMeal, recipe.idDrink]);\n\n  useEffect(() => {\n    getIngredients();\n    getFromStorage();\n  }, [getFromStorage, getIngredients]);\n\n  return (\n    <div ref={ inputRef } className=\"ingredients\">\n\n      {recipeIngredients && recipeIngredients.map(\n        (ingredient, index) => (\n\n          <div\n            key={ index }\n          >\n            <label\n              data-testid={ `${index}-ingredient-step` }\n              htmlFor={ ingredient[1] }\n\n            >\n              <input\n                className=\"checkbox\"\n                id={ ingredient[1] }\n                type=\"checkbox\"\n                name={ `${ingredient[1]} ` }\n                onClick={ handleInput }\n                defaultChecked={\n                  fromStorage\n                   && fromStorage.some((value) => value.includes(ingredient[1]))\n                }\n              />\n              <span>{ingredient[1]}</span>\n            </label>\n            <br />\n          </div>\n        ),\n      )}\n    </div>\n  );\n}\n\nIngredients.propTypes = {\n  recipe: PropTypes.object,\n  index: PropTypes.number,\n}.isRequired;\n"]},"metadata":{},"sourceType":"module"}