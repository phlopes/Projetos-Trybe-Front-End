{"ast":null,"code":"var _jsxFileName = \"/home/phlopes/Projetos/sd-010-a-project-recipes-app/src/pages/RecipesDone/index.js\";\nimport React, { useState } from 'react';\nimport copy from 'clipboard-copy';\nimport shareIcon from \"../../images/shareIcon.svg\";\nexport default function RecipesDone() {\n  const doneRecipes = [{\n    id: '52771',\n    type: 'comida',\n    area: 'Italian',\n    category: 'Vegetarian',\n    alcoholicOrNot: '',\n    name: 'Spicy Arrabiata Penne',\n    image: 'https://www.themealdb.com/images/media/meals/ustsqw1468250014.jpg',\n    doneDate: '23/06/2020',\n    tags: ['Pasta', 'Curry']\n  }, {\n    id: '178319',\n    type: 'bebida',\n    area: '',\n    category: 'Cocktail',\n    alcoholicOrNot: 'Alcoholic',\n    name: 'Aquamarine',\n    image: 'https://www.thecocktaildb.com/images/media/drink/zvsre31572902738.jpg',\n    doneDate: '23/06/2020',\n    tags: []\n  }]; // localStorage.setItem('doneRecipes', JSON.stringify(doneRecipes));\n\n  const [filterRecipes, setFilterRecipes] = useState(doneRecipes);\n  const [clipBoardFood, setClipBoardFood] = useState(false);\n  const [clipBoardDrink, setClipBoardDrink] = useState(false);\n\n  function buttonsFilters(param) {\n    if (param === 'all') {\n      setFilterRecipes(doneRecipes.filter(({\n        type\n      }) => type));\n    }\n\n    if (param === 'food') {\n      setFilterRecipes(doneRecipes.filter(({\n        type\n      }) => type === 'comida'));\n    }\n\n    if (param === 'drinks') {\n      setFilterRecipes(doneRecipes.filter(({\n        type\n      }) => type === 'bebida'));\n    }\n  }\n\n  function clipBoard(type, id) {\n    copy(`http://localhost:3000/${type}s/${id}`);\n\n    if (type === 'comida') {\n      setClipBoardFood(true);\n    }\n\n    if (type === 'bebida') {\n      setClipBoardDrink(true);\n    }\n  }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"nav\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    \"data-testid\": \"filter-by-all-btn\",\n    onClick: () => buttonsFilters('all'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 9\n    }\n  }, \"All\"), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    \"data-testid\": \"filter-by-food-btn\",\n    onClick: () => buttonsFilters('food'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 9\n    }\n  }, \"Food\"), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    \"data-testid\": \"filter-by-drink-btn\",\n    onClick: () => buttonsFilters('drinks'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 9\n    }\n  }, \"Drinks\")), filterRecipes.map(({\n    id,\n    image,\n    category,\n    name,\n    doneDate,\n    tags,\n    type,\n    area,\n    alcoholicOrNot\n  }, index) => type === 'comida' ? /*#__PURE__*/React.createElement(\"div\", {\n    key: id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: image,\n    alt: \"imagem-receive\",\n    \"data-testid\": `${index}-horizontal-image`,\n    width: \"150px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 19\n    }\n  }), /*#__PURE__*/React.createElement(\"p\", {\n    \"data-testid\": `${index}-horizontal-name`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 19\n    }\n  }, name), /*#__PURE__*/React.createElement(\"p\", {\n    \"data-testid\": `${index}-horizontal-top-text`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 19\n    }\n  }, `${area} - ${category}`), /*#__PURE__*/React.createElement(\"p\", {\n    \"data-testid\": `${index}-horizontal-done-date`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 19\n    }\n  }, doneDate), /*#__PURE__*/React.createElement(\"p\", {\n    \"data-testid\": `${index}-${tags[0]}-horizontal-tag`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 19\n    }\n  }, tags[0]), /*#__PURE__*/React.createElement(\"p\", {\n    \"data-testid\": `${index}-${tags[1]}-horizontal-tag`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 19\n    }\n  }, tags[1]), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    onClick: () => clipBoard(type, id),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    \"data-testid\": `${index}-horizontal-share-btn`,\n    src: shareIcon,\n    alt: \"share button\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 21\n    }\n  })), /*#__PURE__*/React.createElement(\"spam\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 19\n    }\n  }, clipBoardFood === true ? 'Link copiado!' : '')) : /*#__PURE__*/React.createElement(\"div\", {\n    key: id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: image,\n    alt: \"imagem-receive\",\n    \"data-testid\": `${index}-horizontal-image`,\n    width: \"150px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 19\n    }\n  }), /*#__PURE__*/React.createElement(\"p\", {\n    \"data-testid\": `${index}-horizontal-name`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 19\n    }\n  }, name), /*#__PURE__*/React.createElement(\"p\", {\n    \"data-testid\": `${index}-horizontal-top-text`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 19\n    }\n  }, alcoholicOrNot), /*#__PURE__*/React.createElement(\"p\", {\n    \"data-testid\": `${index}-horizontal-done-date`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 19\n    }\n  }, doneDate), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    onClick: () => clipBoard(type, id),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    \"data-testid\": `${index}-horizontal-share-btn`,\n    src: shareIcon,\n    alt: \"share button\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 21\n    }\n  })), /*#__PURE__*/React.createElement(\"spam\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 19\n    }\n  }, clipBoardDrink === true ? 'Link copiado!' : ''))));\n}","map":{"version":3,"sources":["/home/phlopes/Projetos/sd-010-a-project-recipes-app/src/pages/RecipesDone/index.js"],"names":["React","useState","copy","RecipesDone","doneRecipes","id","type","area","category","alcoholicOrNot","name","image","doneDate","tags","filterRecipes","setFilterRecipes","clipBoardFood","setClipBoardFood","clipBoardDrink","setClipBoardDrink","buttonsFilters","param","filter","clipBoard","map","index","shareIcon"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport copy from 'clipboard-copy';\nimport shareIcon from '../../images/shareIcon.svg';\n\nexport default function RecipesDone() {\n  const doneRecipes = [\n    {\n      id: '52771',\n      type: 'comida',\n      area: 'Italian',\n      category: 'Vegetarian',\n      alcoholicOrNot: '',\n      name: 'Spicy Arrabiata Penne',\n      image: 'https://www.themealdb.com/images/media/meals/ustsqw1468250014.jpg',\n      doneDate: '23/06/2020',\n      tags: ['Pasta', 'Curry'],\n    },\n    {\n      id: '178319',\n      type: 'bebida',\n      area: '',\n      category: 'Cocktail',\n      alcoholicOrNot: 'Alcoholic',\n      name: 'Aquamarine',\n      image: 'https://www.thecocktaildb.com/images/media/drink/zvsre31572902738.jpg',\n      doneDate: '23/06/2020',\n      tags: [],\n    },\n  ];\n\n  // localStorage.setItem('doneRecipes', JSON.stringify(doneRecipes));\n\n  const [filterRecipes, setFilterRecipes] = useState(doneRecipes);\n  const [clipBoardFood, setClipBoardFood] = useState(false);\n  const [clipBoardDrink, setClipBoardDrink] = useState(false);\n\n  function buttonsFilters(param) {\n    if (param === 'all') {\n      setFilterRecipes(doneRecipes.filter(({ type }) => type));\n    }\n    if (param === 'food') {\n      setFilterRecipes(doneRecipes.filter(({ type }) => type === 'comida'));\n    } if (param === 'drinks') {\n      setFilterRecipes(doneRecipes.filter(({ type }) => type === 'bebida'));\n    }\n  }\n\n  function clipBoard(type, id) {\n    copy(`http://localhost:3000/${type}s/${id}`);\n    if (type === 'comida') {\n      setClipBoardFood(true);\n    } if (type === 'bebida') {\n      setClipBoardDrink(true);\n    }\n  }\n\n  return (\n    <>\n      <nav>\n        <button\n          type=\"button\"\n          data-testid=\"filter-by-all-btn\"\n          onClick={ () => buttonsFilters('all') }\n        >\n          All\n        </button>\n        <button\n          type=\"button\"\n          data-testid=\"filter-by-food-btn\"\n          onClick={ () => buttonsFilters('food') }\n        >\n          Food\n        </button>\n        <button\n          type=\"button\"\n          data-testid=\"filter-by-drink-btn\"\n          onClick={ () => buttonsFilters('drinks') }\n        >\n          Drinks\n        </button>\n      </nav>\n      {filterRecipes\n        .map(\n          ({ id, image, category, name, doneDate, tags, type,\n            area, alcoholicOrNot }, index) => (\n            type === 'comida'\n              ? (\n                <div key={ id }>\n                  <img\n                    src={ image }\n                    alt=\"imagem-receive\"\n                    data-testid={ `${index}-horizontal-image` }\n                    width=\"150px\"\n                  />\n                  <p data-testid={ `${index}-horizontal-name` }>{name}</p>\n                  <p data-testid={ `${index}-horizontal-top-text` }>\n                    {`${area} - ${category}`}\n                  </p>\n                  <p data-testid={ `${index}-horizontal-done-date` }>{doneDate}</p>\n                  <p data-testid={ `${index}-${tags[0]}-horizontal-tag` }>\n                    {tags[0]}\n                  </p>\n                  <p data-testid={ `${index}-${tags[1]}-horizontal-tag` }>\n                    {tags[1]}\n                  </p>\n                  <button type=\"button\" onClick={ () => clipBoard(type, id) }>\n                    <img\n                      data-testid={ `${index}-horizontal-share-btn` }\n                      src={ shareIcon }\n                      alt=\"share button\"\n                    />\n                  </button>\n                  <spam>{clipBoardFood === true ? 'Link copiado!' : ''}</spam>\n                </div>)\n              : (\n                <div key={ id }>\n                  <img\n                    src={ image }\n                    alt=\"imagem-receive\"\n                    data-testid={ `${index}-horizontal-image` }\n                    width=\"150px\"\n                  />\n                  <p data-testid={ `${index}-horizontal-name` }>{name}</p>\n                  <p data-testid={ `${index}-horizontal-top-text` }>{alcoholicOrNot}</p>\n                  <p data-testid={ `${index}-horizontal-done-date` }>{doneDate}</p>\n                  <button type=\"button\" onClick={ () => clipBoard(type, id) }>\n                    <img\n                      data-testid={ `${index}-horizontal-share-btn` }\n                      src={ shareIcon }\n                      alt=\"share button\"\n                    />\n                  </button>\n                  <spam>{clipBoardDrink === true ? 'Link copiado!' : ''}</spam>\n                </div>)\n          ),\n        )}\n    </>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}