{"ast":null,"code":"var _jsxFileName = \"/home/phlopes/Projetos/sd-010-a-project-recipes-app/src/pages/RecipesProgress/Ingredients.js\";\nimport React, { useCallback, useEffect, useState, useRef, useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport './Ingredients.css';\nimport { AppContext } from '../../context/AppContext';\nexport default function Ingredients({\n  recipe\n}) {\n  const [textInput, setTextInput] = useState('');\n  const [recipeId, setRecipeId] = useState('');\n  const [recipeIngredients, setRecipeIngredients] = useState('');\n  const [fromStorage, setFromStorage] = useState('');\n  const {\n    context\n  } = useContext(AppContext);\n  const {\n    setCheckedState\n  } = context;\n  const key = 'inProgressRecipes';\n  const inputRef = useRef(null);\n  const resultRef = useRef('');\n  const ingredientsRef = useRef('');\n  const getFromStorage = useCallback(() => {\n    const storageValue = JSON.parse(localStorage.getItem(key)) || {};\n    const values = Object.entries(storageValue);\n    ingredientsRef.current = [...values];\n    const filter = ingredientsRef.current.filter(ingredient => ingredient[0].includes(recipe.idMeal || recipe.idDrink));\n    filter.forEach(item => setFromStorage(item[1]));\n  }, [recipe.idMeal, recipe.idDrink]);\n  const handleCheckbox = useCallback(() => {\n    let checkBoxCounter = 0;\n    const inputCheckbox = inputRef.current.querySelectorAll('.checkbox');\n    inputCheckbox.forEach(input => {\n      if (input.checked === true) {\n        checkBoxCounter += 1;\n      }\n\n      if (checkBoxCounter === inputCheckbox.length) {\n        setCheckedState(false);\n      }\n    });\n  }, [setCheckedState]);\n  const handleInput = useCallback(({\n    target\n  }) => {\n    handleCheckbox();\n    const {\n      name\n    } = target;\n\n    if (target.checked) {\n      setTextInput([...textInput, name]);\n    }\n  }, [textInput, handleCheckbox]);\n  const getIngredients = useCallback(() => {\n    const ingredients = Object.entries(recipe).filter(property => property[0].includes('strIngredient') && property[1]);\n    setRecipeIngredients(ingredients);\n  }, [recipe]);\n  const getMeasures = useCallback(() => {\n    const measuresList = Object.entries(recipe).filter(property => {\n      const checkKey = property[0].includes('strMeasure');\n      const checkValue = property[1];\n      return checkKey && checkValue;\n    });\n    return measuresList;\n  }, [recipe]);\n  useEffect(() => {\n    const toStorage = {\n      [recipeId]: [...textInput]\n    };\n    const storageValue = JSON.parse(localStorage.getItem(key)) || {};\n    resultRef.current = { ...storageValue,\n      ...toStorage\n    };\n\n    if (textInput.length > 0) {\n      localStorage.setItem(key, JSON.stringify(resultRef.current));\n    }\n  }, [textInput, recipeId, recipe]);\n  useEffect(() => {\n    setRecipeId(recipe.idMeal || recipe.idDrink);\n  }, [recipeId, recipe.idMeal, recipe.idDrink]);\n  useEffect(() => {\n    getMeasures();\n    getIngredients();\n    getFromStorage();\n  }, [getFromStorage, getIngredients, getMeasures]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    ref: inputRef,\n    className: \"ingredients\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 5\n    }\n  }, recipeIngredients && recipeIngredients.map((ingredient, index) => /*#__PURE__*/React.createElement(\"div\", {\n    key: index,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    \"data-testid\": `${index}-ingredient-step`,\n    htmlFor: ingredient[1],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    className: \"checkbox\",\n    id: ingredient[1],\n    type: \"checkbox\",\n    name: `${ingredient[1]} `,\n    onChange: handleInput,\n    defaultChecked: fromStorage && fromStorage.some(value => value.includes(ingredient[1])),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 15\n    }\n  }, `${ingredient[1]} - ${getMeasures()[index][1]}`)), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 13\n    }\n  }))));\n}\nIngredients.propTypes = {\n  recipe: PropTypes.object,\n  index: PropTypes.number\n}.isRequired;","map":{"version":3,"sources":["/home/phlopes/Projetos/sd-010-a-project-recipes-app/src/pages/RecipesProgress/Ingredients.js"],"names":["React","useCallback","useEffect","useState","useRef","useContext","PropTypes","AppContext","Ingredients","recipe","textInput","setTextInput","recipeId","setRecipeId","recipeIngredients","setRecipeIngredients","fromStorage","setFromStorage","context","setCheckedState","key","inputRef","resultRef","ingredientsRef","getFromStorage","storageValue","JSON","parse","localStorage","getItem","values","Object","entries","current","filter","ingredient","includes","idMeal","idDrink","forEach","item","handleCheckbox","checkBoxCounter","inputCheckbox","querySelectorAll","input","checked","length","handleInput","target","name","getIngredients","ingredients","property","getMeasures","measuresList","checkKey","checkValue","toStorage","setItem","stringify","map","index","some","value","propTypes","object","number","isRequired"],"mappings":"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","sourcesContent":["import React, { useCallback, useEffect, useState, useRef, useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport './Ingredients.css';\nimport { AppContext } from '../../context/AppContext';\n\nexport default function Ingredients({ recipe }) {\n  const [textInput, setTextInput] = useState('');\n  const [recipeId, setRecipeId] = useState('');\n  const [recipeIngredients, setRecipeIngredients] = useState('');\n  const [fromStorage, setFromStorage] = useState('');\n  const { context } = useContext(AppContext);\n  const { setCheckedState } = context;\n  const key = 'inProgressRecipes';\n  const inputRef = useRef(null);\n  const resultRef = useRef('');\n  const ingredientsRef = useRef('');\n\n  const getFromStorage = useCallback(() => {\n    const storageValue = JSON.parse(localStorage.getItem(key)) || {};\n    const values = Object.entries(storageValue);\n    ingredientsRef.current = [...values];\n    const filter = ingredientsRef.current\n      .filter((ingredient) => ingredient[0].includes(recipe.idMeal || recipe.idDrink));\n    filter.forEach((item) => setFromStorage(item[1]));\n  }, [recipe.idMeal, recipe.idDrink]);\n\n  const handleCheckbox = useCallback((() => {\n    let checkBoxCounter = 0;\n    const inputCheckbox = inputRef.current.querySelectorAll('.checkbox');\n    inputCheckbox.forEach((input) => {\n      if (input.checked === true) {\n        checkBoxCounter += 1;\n      } if (checkBoxCounter === inputCheckbox.length) {\n        setCheckedState(false);\n      }\n    });\n  }), [setCheckedState]);\n\n  const handleInput = useCallback(({ target }) => {\n    handleCheckbox();\n    const { name } = target;\n    if (target.checked) {\n      setTextInput([\n        ...textInput,\n        name,\n      ]);\n    }\n  }, [textInput, handleCheckbox]);\n\n  const getIngredients = useCallback(() => {\n    const ingredients = Object.entries(recipe)\n      .filter((property) => property[0].includes('strIngredient') && property[1]);\n    setRecipeIngredients(ingredients);\n  }, [recipe]);\n\n  const getMeasures = useCallback(() => {\n    const measuresList = Object.entries(recipe)\n      .filter((property) => {\n        const checkKey = property[0].includes('strMeasure');\n        const checkValue = property[1];\n        return checkKey && checkValue;\n      });\n    return measuresList;\n  }, [recipe]);\n\n  useEffect(() => {\n    const toStorage = {\n      [recipeId]: [...textInput],\n    };\n    const storageValue = JSON.parse(localStorage.getItem(key)) || {};\n    resultRef.current = { ...storageValue, ...toStorage };\n    if (textInput.length > 0) {\n      localStorage.setItem(key, JSON.stringify(resultRef.current));\n    }\n  }, [textInput, recipeId, recipe]);\n\n  useEffect(() => {\n    setRecipeId(recipe.idMeal || recipe.idDrink);\n  }, [recipeId, recipe.idMeal, recipe.idDrink]);\n\n  useEffect(() => {\n    getMeasures();\n    getIngredients();\n    getFromStorage();\n  }, [getFromStorage, getIngredients, getMeasures]);\n\n  return (\n    <div ref={ inputRef } className=\"ingredients\">\n\n      {recipeIngredients && recipeIngredients.map(\n        (ingredient, index) => (\n\n          <div\n            key={ index }\n          >\n            <label\n              data-testid={ `${index}-ingredient-step` }\n              htmlFor={ ingredient[1] }\n\n            >\n              <input\n                className=\"checkbox\"\n                id={ ingredient[1] }\n                type=\"checkbox\"\n                name={ `${ingredient[1]} ` }\n                onChange={ handleInput }\n                defaultChecked={\n                  fromStorage\n                   && fromStorage.some((value) => value.includes(ingredient[1]))\n                }\n              />\n              <span>{`${ingredient[1]} - ${getMeasures()[index][1]}`}</span>\n            </label>\n            <br />\n          </div>\n        ),\n      )}\n    </div>\n  );\n}\n\nIngredients.propTypes = {\n  recipe: PropTypes.object,\n  index: PropTypes.number,\n}.isRequired;\n"]},"metadata":{},"sourceType":"module"}