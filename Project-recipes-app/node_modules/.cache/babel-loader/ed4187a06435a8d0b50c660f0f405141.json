{"ast":null,"code":"var _jsxFileName = \"/home/phlopes/Projetos/sd-010-a-project-recipes-app/src/components/searchBar/index.js\";\nimport React, { useContext } from 'react';\nimport { AppContext } from '../../context/AppContext';\nimport { fetchByIngredientApi, fetchByNameApi, fetchByFirstLetterApi } from '../../services/fetchApiRadio';\nexport default function SearchBar() {\n  const {\n    context\n  } = useContext(AppContext);\n  const {\n    setSearchValue,\n    inputValue,\n    setInputValue,\n    pageOrigin,\n    searchValue,\n    setRecipesList\n  } = context;\n  let searchResults = '';\n  const length = 1;\n  const NUM_RECIPES_SHOWN = 12;\n\n  async function apiSearch(value, input, page) {\n    switch (value) {\n      case 'ingredient-search':\n        searchResults = await fetchByIngredientApi(input, page);\n        searchResults.splice(NUM_RECIPES_SHOWN, searchResults.length - 1);\n        setRecipesList(searchResults);\n        break;\n\n      case 'name-search':\n        searchResults = await fetchByNameApi(input, page);\n        searchResults.splice(NUM_RECIPES_SHOWN, searchResults.length - 1);\n        setRecipesList(searchResults);\n        break;\n\n      case 'first-letter-search':\n        if (input.length > length) {\n          alert('Sua busca deve conter somente 1 (um) caracter');\n        } else {\n          searchResults = await fetchByFirstLetterApi(input, page);\n          searchResults.splice(NUM_RECIPES_SHOWN, searchResults.length - 1);\n          setRecipesList(searchResults);\n        }\n\n        break;\n\n      default:\n        return searchResults;\n    }\n  }\n\n  function generateRadioButtons(value, label, dataTest) {\n    return /*#__PURE__*/React.createElement(\"label\", {\n      htmlFor: \"search-radio\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 7\n      }\n    }, label, /*#__PURE__*/React.createElement(\"input\", {\n      value: value,\n      name: \"search-radio\",\n      onClick: ev => setSearchValue(ev.target.value),\n      type: \"radio\",\n      \"data-testid\": dataTest,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }\n    }));\n  }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"input\", {\n    \"data-testid\": \"search-input\",\n    type: \"text\",\n    value: inputValue,\n    onChange: ev => setInputValue(ev.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }\n  }), generateRadioButtons('ingredient-search', 'Ingrediente', 'ingredient-search-radio'), generateRadioButtons('name-search', 'Nome', 'name-search-radio'), generateRadioButtons('first-letter-search', 'Primeira letra', 'first-letter-search-radio'), /*#__PURE__*/React.createElement(\"button\", {\n    \"data-testid\": \"exec-search-btn\",\n    type: \"button\",\n    onClick: () => apiSearch(searchValue, inputValue, pageOrigin),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }\n  }, \"Buscar\"));\n}","map":{"version":3,"sources":["/home/phlopes/Projetos/sd-010-a-project-recipes-app/src/components/searchBar/index.js"],"names":["React","useContext","AppContext","fetchByIngredientApi","fetchByNameApi","fetchByFirstLetterApi","SearchBar","context","setSearchValue","inputValue","setInputValue","pageOrigin","searchValue","setRecipesList","searchResults","length","NUM_RECIPES_SHOWN","apiSearch","value","input","page","splice","alert","generateRadioButtons","label","dataTest","ev","target"],"mappings":"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","sourcesContent":["import React, { useContext } from 'react';\nimport { AppContext } from '../../context/AppContext';\nimport {\n  fetchByIngredientApi,\n  fetchByNameApi,\n  fetchByFirstLetterApi,\n} from '../../services/fetchApiRadio';\n\nexport default function SearchBar() {\n  const { context } = useContext(AppContext);\n  const {\n    setSearchValue,\n    inputValue,\n    setInputValue,\n    pageOrigin,\n    searchValue,\n    setRecipesList,\n\n  } = context;\n  let searchResults = '';\n  const length = 1;\n  const NUM_RECIPES_SHOWN = 12;\n\n  async function apiSearch(value, input, page) {\n    switch (value) {\n    case 'ingredient-search':\n      searchResults = await fetchByIngredientApi(input, page);\n      searchResults.splice(NUM_RECIPES_SHOWN, searchResults.length - 1);\n      setRecipesList(searchResults);\n      break;\n    case 'name-search':\n      searchResults = await fetchByNameApi(input, page);\n      searchResults.splice(NUM_RECIPES_SHOWN, searchResults.length - 1);\n      setRecipesList(searchResults);\n      break;\n    case 'first-letter-search':\n      if (input.length > length) {\n        alert('Sua busca deve conter somente 1 (um) caracter');\n      } else {\n        searchResults = await fetchByFirstLetterApi(input, page);\n        searchResults.splice(NUM_RECIPES_SHOWN, searchResults.length - 1);\n        setRecipesList(searchResults);\n      }\n      break;\n\n    default:\n      return searchResults;\n    }\n  }\n\n  function generateRadioButtons(value, label, dataTest) {\n    return (\n      <label htmlFor=\"search-radio\">\n        {label}\n        <input\n          value={ value }\n          name=\"search-radio\"\n          onClick={ (ev) => setSearchValue(ev.target.value) }\n          type=\"radio\"\n          data-testid={ dataTest }\n        />\n      </label>\n    );\n  }\n\n  return (\n    <>\n      <input\n        data-testid=\"search-input\"\n        type=\"text\"\n        value={ inputValue }\n        onChange={ (ev) => setInputValue(ev.target.value) }\n      />\n\n      {generateRadioButtons('ingredient-search',\n        'Ingrediente', 'ingredient-search-radio')}\n      {generateRadioButtons('name-search',\n        'Nome', 'name-search-radio')}\n      {generateRadioButtons('first-letter-search',\n        'Primeira letra', 'first-letter-search-radio')}\n      <button\n        data-testid=\"exec-search-btn\"\n        type=\"button\"\n        onClick={ () => apiSearch(searchValue, inputValue, pageOrigin) }\n      >\n        Buscar\n\n      </button>\n    </>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}