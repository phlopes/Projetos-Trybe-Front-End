{"ast":null,"code":"var _jsxFileName = \"/home/phlopes/Projetos/sd-010-a-project-recipes-app/src/context/AppContext.jsx\";\nimport React, { useState, createContext, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { fetchRecipesApi, fetchCategoriesApi } from '../services/fetchApiMain';\nexport const AppContext = createContext();\nexport default function AppProvider({\n  children\n}) {\n  // header States\n  const [displaySearchBar, setDisplaySearchBar] = useState(false);\n  const [searchValue, setSearchValue] = useState('');\n  const [inputValue, setInputValue] = useState('');\n  const [pageOrigin, setPageOrigin] = useState('');\n  const [recipesList, setRecipesList] = useState([]);\n  const [categoriesList, setCategoriesList] = useState([]);\n  const [toStorage, setToStorage] = useState('');\n  const [toDoneStorage, setToDoneStorage] = useState('');\n  const [checkedState, setCheckedState] = useState(true);\n  const [recipe, setRecipe] = useState('');\n  const NUM_RECIPES_SHOWN = 12;\n  const NUM_CATEG_SHOWN = 5;\n  const context = {\n    displaySearchBar,\n    setDisplaySearchBar,\n    searchValue,\n    setSearchValue,\n    inputValue,\n    setInputValue,\n    pageOrigin,\n    setPageOrigin,\n    recipesList,\n    setRecipesList,\n    categoriesList,\n    setCategoriesList,\n    toStorage,\n    checkedState,\n    setCheckedState,\n    recipe,\n    setRecipe,\n    toDoneStorage\n  };\n  useEffect(() => {\n    const inProgressStorage = [{\n      id: recipe.idMeal || recipe.idDrink,\n      type: pageOrigin.includes('themealdb') ? 'comida' : 'bebida',\n      area: recipe.strArea || '',\n      category: recipe.strCategory || '',\n      alcoholicOrNot: recipe.strAlcoholic || '',\n      name: recipe.strMeal || recipe.strDrink,\n      image: recipe.strMealThumb || recipe.strDrinkThumb\n    }];\n    setToStorage(inProgressStorage);\n  }, [recipe, pageOrigin]); // ideia para criar o formato da data\n  // https://qastack.com.br/programming/6040515/how-do-i-get-month-and-date-of-javascript-in-2-digit-format\n\n  useEffect(() => {\n    const data = new Date();\n    const day = data.getDate().toString().padStart(2, '0');\n    const month = (data.getMonth() + 1).toString().padStart(2, '0');\n    const year = data.getFullYear();\n    const doneDate = `${day}/${month}/${year}`;\n    const DoneRecipeStorage = [{\n      id: recipe.idMeal || recipe.idDrink,\n      type: pageOrigin.includes('themealdb') ? 'comida' : 'bebida',\n      area: recipe.strArea || '',\n      category: recipe.strCategory || '',\n      alcoholicOrNot: recipe.strAlcoholic || '',\n      name: recipe.strMeal || recipe.strDrink,\n      image: recipe.strMealThumb || recipe.strDrinkThumb,\n      doneDate,\n      tags: [recipe.strTags] || []\n    }];\n    setToDoneStorage(DoneRecipeStorage);\n  }, [recipe, pageOrigin]);\n  useEffect(() => {\n    fetchCategoriesApi(pageOrigin).then(categories => {\n      categories.splice(NUM_CATEG_SHOWN, categories.length - 1);\n      setCategoriesList(categories);\n    });\n  }, [pageOrigin]);\n  useEffect(() => {\n    fetchRecipesApi(pageOrigin).then(recipes => {\n      recipes.splice(NUM_RECIPES_SHOWN, recipes.length - 1);\n      setRecipesList(recipes);\n    });\n  }, [pageOrigin]);\n  return /*#__PURE__*/React.createElement(AppContext.Provider, {\n    value: {\n      context\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 5\n    }\n  }, children);\n}\nAppProvider.propTypes = {\n  children: PropTypes.node\n}.isRequired;","map":{"version":3,"sources":["/home/phlopes/Projetos/sd-010-a-project-recipes-app/src/context/AppContext.jsx"],"names":["React","useState","createContext","useEffect","PropTypes","fetchRecipesApi","fetchCategoriesApi","AppContext","AppProvider","children","displaySearchBar","setDisplaySearchBar","searchValue","setSearchValue","inputValue","setInputValue","pageOrigin","setPageOrigin","recipesList","setRecipesList","categoriesList","setCategoriesList","toStorage","setToStorage","toDoneStorage","setToDoneStorage","checkedState","setCheckedState","recipe","setRecipe","NUM_RECIPES_SHOWN","NUM_CATEG_SHOWN","context","inProgressStorage","id","idMeal","idDrink","type","includes","area","strArea","category","strCategory","alcoholicOrNot","strAlcoholic","name","strMeal","strDrink","image","strMealThumb","strDrinkThumb","data","Date","day","getDate","toString","padStart","month","getMonth","year","getFullYear","doneDate","DoneRecipeStorage","tags","strTags","then","categories","splice","length","recipes","propTypes","node","isRequired"],"mappings":"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","sourcesContent":["import React, { useState, createContext, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { fetchRecipesApi, fetchCategoriesApi } from '../services/fetchApiMain';\n\nexport const AppContext = createContext();\nexport default function AppProvider({ children }) {\n  // header States\n  const [displaySearchBar, setDisplaySearchBar] = useState(false);\n  const [searchValue, setSearchValue] = useState('');\n  const [inputValue, setInputValue] = useState('');\n  const [pageOrigin, setPageOrigin] = useState('');\n  const [recipesList, setRecipesList] = useState([]);\n  const [categoriesList, setCategoriesList] = useState([]);\n  const [toStorage, setToStorage] = useState('');\n  const [toDoneStorage, setToDoneStorage] = useState('');\n  const [checkedState, setCheckedState] = useState(true);\n  const [recipe, setRecipe] = useState('');\n  const NUM_RECIPES_SHOWN = 12;\n  const NUM_CATEG_SHOWN = 5;\n  const context = {\n    displaySearchBar,\n    setDisplaySearchBar,\n    searchValue,\n    setSearchValue,\n    inputValue,\n    setInputValue,\n    pageOrigin,\n    setPageOrigin,\n    recipesList,\n    setRecipesList,\n    categoriesList,\n    setCategoriesList,\n    toStorage,\n    checkedState,\n    setCheckedState,\n    recipe,\n    setRecipe,\n    toDoneStorage,\n\n  };\n\n  useEffect(() => {\n    const inProgressStorage = [{\n      id: recipe.idMeal || recipe.idDrink,\n      type: pageOrigin.includes('themealdb') ? 'comida' : 'bebida',\n      area: recipe.strArea || '',\n      category: recipe.strCategory || '',\n      alcoholicOrNot: recipe.strAlcoholic || '',\n      name: recipe.strMeal || recipe.strDrink,\n      image: recipe.strMealThumb || recipe.strDrinkThumb,\n    }];\n    setToStorage(inProgressStorage);\n  }, [recipe, pageOrigin]);\n\n  // ideia para criar o formato da data\n  // https://qastack.com.br/programming/6040515/how-do-i-get-month-and-date-of-javascript-in-2-digit-format\n\n  useEffect(() => {\n    const data = new Date();\n    const day = data.getDate().toString().padStart(2, '0');\n    const month = (data.getMonth() + 1).toString().padStart(2, '0');\n    const year = data.getFullYear();\n    const doneDate = `${day}/${month}/${year}`;\n    const DoneRecipeStorage = [{\n      id: recipe.idMeal || recipe.idDrink,\n      type: pageOrigin.includes('themealdb') ? 'comida' : 'bebida',\n      area: recipe.strArea || '',\n      category: recipe.strCategory || '',\n      alcoholicOrNot: recipe.strAlcoholic || '',\n      name: recipe.strMeal || recipe.strDrink,\n      image: recipe.strMealThumb || recipe.strDrinkThumb,\n      doneDate,\n      tags: [recipe.strTags] || [],\n    }];\n    setToDoneStorage(DoneRecipeStorage);\n  }, [recipe, pageOrigin]);\n\n  useEffect(() => {\n    fetchCategoriesApi(pageOrigin)\n      .then((categories) => {\n        categories.splice(NUM_CATEG_SHOWN, categories.length - 1);\n        setCategoriesList(categories);\n      });\n  }, [pageOrigin]);\n\n  useEffect(() => {\n    fetchRecipesApi(pageOrigin)\n      .then((recipes) => {\n        recipes.splice(NUM_RECIPES_SHOWN, recipes.length - 1);\n        setRecipesList(recipes);\n      });\n  }, [pageOrigin]);\n\n  return (\n    <AppContext.Provider value={ { context } }>\n      {children}\n    </AppContext.Provider>\n  );\n}\n\nAppProvider.propTypes = {\n  children: PropTypes.node,\n}.isRequired;\n"]},"metadata":{},"sourceType":"module"}