{"ast":null,"code":"var _jsxFileName = \"/home/phlopes/Projetos/sd-010-a-project-trivia-react-redux/src/components/TriviaCard.jsx\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport '../styles/triviaCard.css';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\nimport { sumScore } from '../Redux/actions';\nconst correctAnswer = 'correct-answer';\nconst questionLength = 5;\n\nclass TriviaCard extends Component {\n  constructor() {\n    super();\n    this.state = {\n      seconds: 30,\n      clicked: false\n    };\n    this.decrement = this.decrement.bind(this);\n    this.startTimer = this.startTimer.bind(this);\n    this.stopTimer = this.stopTimer.bind(this);\n    this.resetTimer = this.resetTimer.bind(this);\n    this.updateClicked = this.updateClicked.bind(this);\n  }\n\n  componentDidMount() {\n    this.startTimer();\n  }\n\n  componentDidUpdate(prevProps) {\n    const questionIndex = this.props.questionIndex;\n    if (questionIndex === questionLength) return;\n\n    if (prevProps !== this.props) {\n      const wrongAnswers = document.querySelectorAll('.wrong-answers');\n      const elCorrectAnswer = document.getElementById(correctAnswer);\n      wrongAnswers.forEach(button => {\n        button.classList.remove('incorrect');\n      });\n      elCorrectAnswer.classList.remove('correct');\n      this.resetTimer();\n      this.stopTimer();\n      this.startTimer();\n      this.updateClicked();\n    }\n  }\n\n  updateClicked() {\n    this.setState({\n      clicked: false\n    });\n  }\n\n  resetTimer() {\n    this.setState({\n      seconds: 30\n    });\n  }\n\n  decrement() {\n    const seconds = this.state.seconds;\n\n    if (seconds === 0) {\n      this.stopTimer();\n    } else {\n      this.setState(previousState => ({\n        seconds: previousState.seconds - 1\n      }));\n    }\n  }\n\n  startTimer() {\n    const interval = 1000;\n    this.timer = setInterval(this.decrement, interval);\n  }\n\n  stopTimer() {\n    clearInterval(this.timer);\n  }\n\n  verifyAnswers(event) {\n    const verifyClicked = this.props.verifyClicked;\n    verifyClicked();\n    const wrongAnswers = document.querySelectorAll('.wrong-answers');\n    const elCorrectAnswer = document.getElementById(correctAnswer);\n    elCorrectAnswer.classList.add('correct');\n    wrongAnswers.forEach(button => {\n      button.classList.add('incorrect');\n    });\n\n    if (event.target.id === correctAnswer) {\n      const seconds = this.state.seconds;\n      const _this$props = this.props,\n            saveScore = _this$props.saveScore,\n            difficulty = _this$props.result.difficulty;\n      saveScore({\n        seconds,\n        difficulty\n      });\n    }\n\n    this.setState({\n      clicked: true\n    });\n  }\n\n  render() {\n    const questionIndex = this.props.questionIndex;\n    if (questionIndex === questionLength) return React.createElement(Redirect, {\n      to: \"/feedback\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    });\n    const _this$props$result = this.props.result,\n          category = _this$props$result.category,\n          question = _this$props$result.question,\n          elCorrectAnswer = _this$props$result.correct_answer,\n          incorrectAnswers = _this$props$result.incorrect_answers;\n    const _this$state = this.state,\n          seconds = _this$state.seconds,\n          clicked = _this$state.clicked;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      \"data-testid\": \"question-category\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    }, category), React.createElement(\"h2\", {\n      \"data-testid\": \"question-text\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }, question), React.createElement(\"button\", {\n      className: \"questions-buttons\",\n      type: \"button\",\n      id: \"correct-answer\",\n      \"data-testid\": \"correct-answer\",\n      onClick: e => this.verifyAnswers(e),\n      disabled: seconds === 0 || clicked,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }, elCorrectAnswer), incorrectAnswers.map((answer, index) => React.createElement(\"button\", {\n      className: \"wrong-answers\",\n      type: \"button\",\n      \"data-testid\": `wrong-answer-${index}`,\n      key: answer,\n      onClick: e => this.verifyAnswers(e),\n      disabled: seconds === 0 || clicked,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    }, answer)), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146\n      },\n      __self: this\n    }, seconds));\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  questionIndex: state.saveQuestions.index\n});\n\nconst mapDispatchToProps = dispatch => ({\n  saveScore: seconds => dispatch(sumScore(seconds))\n});\n\nTriviaCard.propTypes = {\n  result: PropTypes.shape({\n    category: PropTypes.string,\n    question: PropTypes.string\n  })\n}.isRequired;\nexport default connect(mapStateToProps, mapDispatchToProps)(TriviaCard);","map":{"version":3,"sources":["/home/phlopes/Projetos/sd-010-a-project-trivia-react-redux/src/components/TriviaCard.jsx"],"names":["React","Component","PropTypes","connect","Redirect","sumScore","correctAnswer","questionLength","TriviaCard","constructor","state","seconds","clicked","decrement","bind","startTimer","stopTimer","resetTimer","updateClicked","componentDidMount","componentDidUpdate","prevProps","questionIndex","props","wrongAnswers","document","querySelectorAll","elCorrectAnswer","getElementById","forEach","button","classList","remove","setState","previousState","interval","timer","setInterval","clearInterval","verifyAnswers","event","verifyClicked","add","target","id","saveScore","difficulty","result","render","category","question","correct_answer","incorrectAnswers","incorrect_answers","e","map","answer","index","mapStateToProps","saveQuestions","mapDispatchToProps","dispatch","propTypes","shape","string","isRequired"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport '../styles/triviaCard.css';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\nimport { sumScore } from '../Redux/actions';\n\nconst correctAnswer = 'correct-answer';\nconst questionLength = 5;\n\nclass TriviaCard extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      seconds: 30,\n      clicked: false,\n    };\n\n    this.decrement = this.decrement.bind(this);\n    this.startTimer = this.startTimer.bind(this);\n    this.stopTimer = this.stopTimer.bind(this);\n    this.resetTimer = this.resetTimer.bind(this);\n    this.updateClicked = this.updateClicked.bind(this);\n  }\n\n  componentDidMount() {\n    this.startTimer();\n  }\n\n  componentDidUpdate(prevProps) {\n    const { questionIndex } = this.props;\n    if (questionIndex === questionLength) return;\n    if (prevProps !== this.props) {\n      const wrongAnswers = document.querySelectorAll('.wrong-answers');\n      const elCorrectAnswer = document.getElementById(correctAnswer);\n      wrongAnswers.forEach((button) => {\n        button.classList.remove('incorrect');\n      });\n      elCorrectAnswer.classList.remove('correct');\n\n      this.resetTimer();\n      this.stopTimer();\n      this.startTimer();\n\n      this.updateClicked();\n    }\n  }\n\n  updateClicked() {\n    this.setState({\n      clicked: false,\n    });\n  }\n\n  resetTimer() {\n    this.setState({\n      seconds: 30,\n    });\n  }\n\n  decrement() {\n    const { seconds } = this.state;\n    if (seconds === 0) {\n      this.stopTimer();\n    } else {\n      this.setState((previousState) => ({\n        seconds: previousState.seconds - 1,\n      }));\n    }\n  }\n\n  startTimer() {\n    const interval = 1000;\n    this.timer = setInterval(this.decrement, interval);\n  }\n\n  stopTimer() {\n    clearInterval(this.timer);\n  }\n\n  verifyAnswers(event) {\n    const { verifyClicked } = this.props;\n    verifyClicked();\n    const wrongAnswers = document.querySelectorAll('.wrong-answers');\n    const elCorrectAnswer = document.getElementById(correctAnswer);\n    elCorrectAnswer.classList.add('correct');\n    wrongAnswers.forEach((button) => {\n      button.classList.add('incorrect');\n    });\n\n    if (event.target.id === correctAnswer) {\n      const { seconds } = this.state;\n      const {\n        saveScore,\n        result: { difficulty },\n      } = this.props;\n\n      saveScore({ seconds, difficulty });\n    }\n\n    this.setState({\n      clicked: true,\n    });\n  }\n\n  render() {\n    const { questionIndex } = this.props;\n    if (questionIndex === questionLength) return <Redirect to=\"/feedback\" />;\n    const {\n      result: {\n        category,\n        question,\n        correct_answer: elCorrectAnswer,\n        incorrect_answers: incorrectAnswers,\n      },\n    } = this.props;\n    const { seconds, clicked } = this.state;\n\n    return (\n      <div>\n        <h1 data-testid=\"question-category\">{category}</h1>\n        <h2 data-testid=\"question-text\">{question}</h2>\n        <button\n          className=\"questions-buttons\"\n          type=\"button\"\n          id=\"correct-answer\"\n          data-testid=\"correct-answer\"\n          onClick={ (e) => this.verifyAnswers(e) }\n          disabled={ seconds === 0 || clicked }\n        >\n          {elCorrectAnswer}\n        </button>\n        {incorrectAnswers.map((answer, index) => (\n          <button\n            className=\"wrong-answers\"\n            type=\"button\"\n            data-testid={ `wrong-answer-${index}` }\n            key={ answer }\n            onClick={ (e) => this.verifyAnswers(e) }\n            disabled={ seconds === 0 || clicked }\n          >\n            {answer}\n          </button>\n        ))}\n        <p>{seconds}</p>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  questionIndex: state.saveQuestions.index,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  saveScore: (seconds) => dispatch(sumScore(seconds)),\n});\n\nTriviaCard.propTypes = {\n  result: PropTypes.shape({\n    category: PropTypes.string,\n    question: PropTypes.string,\n  }),\n}.isRequired;\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TriviaCard);\n"]},"metadata":{},"sourceType":"module"}