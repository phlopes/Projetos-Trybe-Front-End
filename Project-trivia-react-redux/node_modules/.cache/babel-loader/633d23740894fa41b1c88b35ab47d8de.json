{"ast":null,"code":"var _jsxFileName = \"/home/phlopes/Projetos/sd-010-a-project-trivia-react-redux/src/components/TriviaCard.jsx\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nclass TriviaCard extends Component {\n  render() {\n    const _this$props$result = this.props.result,\n          category = _this$props$result.category,\n          question = _this$props$result.question,\n          correctAnswer = _this$props$result.correct_answer,\n          incorrectAnswers = _this$props$result.incorrect_answers;\n    console.log(category);\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 16\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      \"data-testid\": \"question-category\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 17\n      },\n      __self: this\n    }, category), React.createElement(\"h2\", {\n      \"data-testid\": \"question-text\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 18\n      },\n      __self: this\n    }, question), React.createElement(\"button\", {\n      type: \"button\",\n      \"data-testid\": \"correct-answer\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 19\n      },\n      __self: this\n    }, correctAnswer), incorrectAnswers.map((answer, index) => React.createElement(\"button\", {\n      type: \"button\",\n      \"data-testid\": `wrong-answer-${index}`,\n      key: answer,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 21\n      },\n      __self: this\n    }, answer)));\n  }\n\n}\n\nTriviaCard.propTypes = {\n  result: PropTypes.shape({\n    category: PropTypes.string,\n    question: PropTypes.string\n  })\n}.isRequired;\nexport default TriviaCard;","map":{"version":3,"sources":["/home/phlopes/Projetos/sd-010-a-project-trivia-react-redux/src/components/TriviaCard.jsx"],"names":["React","Component","PropTypes","TriviaCard","render","props","result","category","question","correctAnswer","correct_answer","incorrectAnswers","incorrect_answers","console","log","map","answer","index","propTypes","shape","string","isRequired"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,SAAP,MAAsB,YAAtB;;AAEA,MAAMC,UAAN,SAAyBF,SAAzB,CAAmC;AACjCG,EAAAA,MAAM,GAAG;AAAA,+BAQH,KAAKC,KARF,CAELC,MAFK;AAAA,UAGHC,QAHG,sBAGHA,QAHG;AAAA,UAIHC,QAJG,sBAIHA,QAJG;AAAA,UAKaC,aALb,sBAKHC,cALG;AAAA,UAMgBC,gBANhB,sBAMHC,iBANG;AASPC,IAAAA,OAAO,CAACC,GAAR,CAAYP,QAAZ;AACA,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAI,qBAAY,mBAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAqCA,QAArC,CADF,EAEE;AAAI,qBAAY,eAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAiCC,QAAjC,CAFF,EAGE;AAAQ,MAAA,IAAI,EAAC,QAAb;AAAsB,qBAAY,gBAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAoDC,aAApD,CAHF,EAIGE,gBAAgB,CAACI,GAAjB,CAAqB,CAACC,MAAD,EAASC,KAAT,KACpB;AAAQ,MAAA,IAAI,EAAC,QAAb;AAAsB,qBAAe,gBAAeA,KAAM,EAA1D;AAA8D,MAAA,GAAG,EAAGD,MAApE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGA,MADH,CADD,CAJH,CADF;AAYD;;AAvBgC;;AA0BnCb,UAAU,CAACe,SAAX,GAAuB;AACrBZ,EAAAA,MAAM,EAAEJ,SAAS,CAACiB,KAAV,CAAgB;AACtBZ,IAAAA,QAAQ,EAAEL,SAAS,CAACkB,MADE;AAEtBZ,IAAAA,QAAQ,EAAEN,SAAS,CAACkB;AAFE,GAAhB;AADa,EAKrBC,UALF;AAMA,eAAelB,UAAf","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nclass TriviaCard extends Component {\n  render() {\n    const {\n      result: {\n        category,\n        question,\n        correct_answer: correctAnswer,\n        incorrect_answers: incorrectAnswers,\n      },\n    } = this.props;\n    console.log(category);\n    return (\n      <div>\n        <h1 data-testid=\"question-category\">{category}</h1>\n        <h2 data-testid=\"question-text\">{question}</h2>\n        <button type=\"button\" data-testid=\"correct-answer\">{correctAnswer}</button>\n        {incorrectAnswers.map((answer, index) => (\n          <button type=\"button\" data-testid={ `wrong-answer-${index}` } key={ answer }>\n            {answer}\n          </button>\n        ))}\n      </div>\n    );\n  }\n}\n\nTriviaCard.propTypes = {\n  result: PropTypes.shape({\n    category: PropTypes.string,\n    question: PropTypes.string,\n  }),\n}.isRequired;\nexport default TriviaCard;\n"]},"metadata":{},"sourceType":"module"}