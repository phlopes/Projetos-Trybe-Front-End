{"ast":null,"code":"import { fetchTrivia } from '../../services/Api';\nexport const LOGIN = 'LOGIN';\nexport const SAVE_QUESTIONS_SUCCESS = 'SAVE_QUESTIONS_SUCCESS';\nexport const SAVE_QUESTIONS_ERROR = 'SAVE_QUESTIONS_ERROR';\nexport const SUM_SCORE = 'SUM_SCORE';\nexport const NEXT_INDEX = 'NEXT_INDEX';\nexport const SET_PICTURE_PATH = 'SET_PICTURE_PATH';\nexport const RESET_QUESTIONS_REDUCER = 'RESET_QUESTIONS_REDUCER';\nexport const RESET_LOGIN_REDUCER = 'RESET_LOGIN_REDUCER';\nexport const RESET_SCORE = 'RESET_SCORE';\nexport const loginAction = payload => ({\n  type: LOGIN,\n  payload\n});\n\nconst saveQuestionsSuccess = payload => ({\n  type: SAVE_QUESTIONS_SUCCESS,\n  payload\n});\n\nconst saveQuestionsError = payload => ({\n  type: SAVE_QUESTIONS_ERROR,\n  payload\n});\n\nexport const nextIndexAction = () => ({\n  type: NEXT_INDEX\n});\nexport const saveQuestionsThunk = (amount, token) => async dispatch => {\n  try {\n    const results = await fetchTrivia(amount, token);\n    dispatch(saveQuestionsSuccess(results));\n  } catch (error) {\n    dispatch(saveQuestionsError(error));\n  }\n};\nexport const loginActionThunk = payload => async dispatch => {\n  dispatch(loginAction(payload));\n};\nexport const sumScore = payload => ({\n  type: SUM_SCORE,\n  payload\n});\nexport const setPicturePath = payload => ({\n  type: SET_PICTURE_PATH,\n  payload\n});\nexport const resetQuestions = () => ({\n  type: RESET_QUESTIONS_REDUCER\n});\nexport const resetLogin = () => ({\n  type: RESET_LOGIN_REDUCER\n});\nexport const resetScore = () => ({\n  type: RESET_SCORE\n});","map":{"version":3,"sources":["/home/phlopes/Projetos/sd-010-a-project-trivia-react-redux/src/Redux/actions/index.js"],"names":["fetchTrivia","LOGIN","SAVE_QUESTIONS_SUCCESS","SAVE_QUESTIONS_ERROR","SUM_SCORE","NEXT_INDEX","SET_PICTURE_PATH","RESET_QUESTIONS_REDUCER","RESET_LOGIN_REDUCER","RESET_SCORE","loginAction","payload","type","saveQuestionsSuccess","saveQuestionsError","nextIndexAction","saveQuestionsThunk","amount","token","dispatch","results","error","loginActionThunk","sumScore","setPicturePath","resetQuestions","resetLogin","resetScore"],"mappings":"AAAA,SAASA,WAAT,QAA4B,oBAA5B;AAEA,OAAO,MAAMC,KAAK,GAAG,OAAd;AACP,OAAO,MAAMC,sBAAsB,GAAG,wBAA/B;AACP,OAAO,MAAMC,oBAAoB,GAAG,sBAA7B;AACP,OAAO,MAAMC,SAAS,GAAG,WAAlB;AACP,OAAO,MAAMC,UAAU,GAAG,YAAnB;AACP,OAAO,MAAMC,gBAAgB,GAAG,kBAAzB;AACP,OAAO,MAAMC,uBAAuB,GAAG,yBAAhC;AACP,OAAO,MAAMC,mBAAmB,GAAG,qBAA5B;AACP,OAAO,MAAMC,WAAW,GAAG,aAApB;AAEP,OAAO,MAAMC,WAAW,GAAIC,OAAD,KAAc;AACvCC,EAAAA,IAAI,EAAEX,KADiC;AAEvCU,EAAAA;AAFuC,CAAd,CAApB;;AAKP,MAAME,oBAAoB,GAAIF,OAAD,KAAc;AACzCC,EAAAA,IAAI,EAAEV,sBADmC;AAEzCS,EAAAA;AAFyC,CAAd,CAA7B;;AAKA,MAAMG,kBAAkB,GAAIH,OAAD,KAAc;AACvCC,EAAAA,IAAI,EAAET,oBADiC;AAEvCQ,EAAAA;AAFuC,CAAd,CAA3B;;AAKA,OAAO,MAAMI,eAAe,GAAG,OAAO;AACpCH,EAAAA,IAAI,EAAEP;AAD8B,CAAP,CAAxB;AAIP,OAAO,MAAMW,kBAAkB,GAAG,CAACC,MAAD,EAASC,KAAT,KAAmB,MAAOC,QAAP,IAAoB;AACvE,MAAI;AACF,UAAMC,OAAO,GAAG,MAAMpB,WAAW,CAACiB,MAAD,EAASC,KAAT,CAAjC;AACAC,IAAAA,QAAQ,CAACN,oBAAoB,CAACO,OAAD,CAArB,CAAR;AACD,GAHD,CAGE,OAAOC,KAAP,EAAc;AACdF,IAAAA,QAAQ,CAACL,kBAAkB,CAACO,KAAD,CAAnB,CAAR;AACD;AACF,CAPM;AASP,OAAO,MAAMC,gBAAgB,GAAIX,OAAD,IAAa,MAAOQ,QAAP,IAAoB;AAC/DA,EAAAA,QAAQ,CAACT,WAAW,CAACC,OAAD,CAAZ,CAAR;AACD,CAFM;AAIP,OAAO,MAAMY,QAAQ,GAAIZ,OAAD,KAAc;AACpCC,EAAAA,IAAI,EAAER,SAD8B;AAEpCO,EAAAA;AAFoC,CAAd,CAAjB;AAKP,OAAO,MAAMa,cAAc,GAAIb,OAAD,KAAc;AAC1CC,EAAAA,IAAI,EAAEN,gBADoC;AAE1CK,EAAAA;AAF0C,CAAd,CAAvB;AAKP,OAAO,MAAMc,cAAc,GAAG,OAAO;AACnCb,EAAAA,IAAI,EAAEL;AAD6B,CAAP,CAAvB;AAIP,OAAO,MAAMmB,UAAU,GAAG,OAAO;AAC/Bd,EAAAA,IAAI,EAAEJ;AADyB,CAAP,CAAnB;AAIP,OAAO,MAAMmB,UAAU,GAAG,OAAO;AAC/Bf,EAAAA,IAAI,EAAEH;AADyB,CAAP,CAAnB","sourcesContent":["import { fetchTrivia } from '../../services/Api';\n\nexport const LOGIN = 'LOGIN';\nexport const SAVE_QUESTIONS_SUCCESS = 'SAVE_QUESTIONS_SUCCESS';\nexport const SAVE_QUESTIONS_ERROR = 'SAVE_QUESTIONS_ERROR';\nexport const SUM_SCORE = 'SUM_SCORE';\nexport const NEXT_INDEX = 'NEXT_INDEX';\nexport const SET_PICTURE_PATH = 'SET_PICTURE_PATH';\nexport const RESET_QUESTIONS_REDUCER = 'RESET_QUESTIONS_REDUCER';\nexport const RESET_LOGIN_REDUCER = 'RESET_LOGIN_REDUCER';\nexport const RESET_SCORE = 'RESET_SCORE';\n\nexport const loginAction = (payload) => ({\n  type: LOGIN,\n  payload,\n});\n\nconst saveQuestionsSuccess = (payload) => ({\n  type: SAVE_QUESTIONS_SUCCESS,\n  payload,\n});\n\nconst saveQuestionsError = (payload) => ({\n  type: SAVE_QUESTIONS_ERROR,\n  payload,\n});\n\nexport const nextIndexAction = () => ({\n  type: NEXT_INDEX,\n});\n\nexport const saveQuestionsThunk = (amount, token) => async (dispatch) => {\n  try {\n    const results = await fetchTrivia(amount, token);\n    dispatch(saveQuestionsSuccess(results));\n  } catch (error) {\n    dispatch(saveQuestionsError(error));\n  }\n};\n\nexport const loginActionThunk = (payload) => async (dispatch) => {\n  dispatch(loginAction(payload));\n};\n\nexport const sumScore = (payload) => ({\n  type: SUM_SCORE,\n  payload,\n});\n\nexport const setPicturePath = (payload) => ({\n  type: SET_PICTURE_PATH,\n  payload,\n});\n\nexport const resetQuestions = () => ({\n  type: RESET_QUESTIONS_REDUCER,\n});\n\nexport const resetLogin = () => ({\n  type: RESET_LOGIN_REDUCER,\n});\n\nexport const resetScore = () => ({\n  type: RESET_SCORE,\n});\n"]},"metadata":{},"sourceType":"module"}