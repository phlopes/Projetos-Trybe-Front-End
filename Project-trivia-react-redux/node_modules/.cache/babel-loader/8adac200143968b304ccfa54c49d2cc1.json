{"ast":null,"code":"var _jsxFileName = \"/home/phlopes/Projetos/sd-010-a-project-trivia-react-redux/src/components/TriviaCard.jsx\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport '../styles/TriviaCard.css';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\nimport { FcAlarmClock } from 'react-icons/fc';\nimport { sumScore } from '../Redux/actions';\nconst correctAnswer = 'correct-answer';\nconst questionLength = 5;\n\nclass TriviaCard extends Component {\n  constructor() {\n    super();\n    this.state = {\n      seconds: 30,\n      clicked: false\n    };\n    this.decrement = this.decrement.bind(this);\n    this.startTimer = this.startTimer.bind(this);\n    this.stopTimer = this.stopTimer.bind(this);\n    this.resetTimer = this.resetTimer.bind(this);\n    this.updateClicked = this.updateClicked.bind(this);\n    this.renderTimer = this.renderTimer.bind(this);\n  }\n\n  componentDidMount() {\n    this.startTimer();\n  }\n\n  componentDidUpdate(prevProps) {\n    const questionIndex = this.props.questionIndex;\n    if (questionIndex === questionLength) return;\n\n    if (prevProps !== this.props) {\n      const wrongAnswers = document.querySelectorAll('.wrong-answers');\n      const elCorrectAnswer = document.getElementById(correctAnswer);\n      wrongAnswers.forEach(button => {\n        button.classList.remove('incorrect');\n      });\n      elCorrectAnswer.classList.remove('correct');\n      this.resetTimer();\n      this.stopTimer();\n      this.startTimer();\n      this.updateClicked();\n      const verifyClicked = this.props.verifyClicked;\n      verifyClicked(false);\n    }\n  }\n\n  updateClicked() {\n    this.setState({\n      clicked: false\n    });\n  }\n\n  resetTimer() {\n    this.setState({\n      seconds: 30\n    });\n  }\n\n  decrement() {\n    const seconds = this.state.seconds;\n\n    if (seconds === 0) {\n      this.stopTimer();\n    } else {\n      this.setState(previousState => ({\n        seconds: previousState.seconds - 1\n      }));\n    }\n  }\n\n  startTimer() {\n    const interval = 1000;\n    this.timer = setInterval(this.decrement, interval);\n  }\n\n  stopTimer() {\n    clearInterval(this.timer);\n  }\n\n  verifyAnswers(event) {\n    const verifyClicked = this.props.verifyClicked;\n    verifyClicked(true);\n    const wrongAnswers = document.querySelectorAll('.wrong-answers');\n    const elCorrectAnswer = document.getElementById(correctAnswer);\n    elCorrectAnswer.classList.add('correct');\n    wrongAnswers.forEach(button => {\n      button.classList.add('incorrect');\n    });\n\n    if (event.target.id === correctAnswer) {\n      const seconds = this.state.seconds;\n      const _this$props = this.props,\n            saveScore = _this$props.saveScore,\n            difficulty = _this$props.result.difficulty;\n      saveScore({\n        seconds,\n        difficulty\n      });\n    }\n\n    this.setState({\n      clicked: true\n    });\n  }\n\n  renderTimer(seconds) {\n    const verifySeconds = this.props.verifySeconds;\n\n    if (seconds !== 0) {\n      verifySeconds(false);\n      return React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115\n        },\n        __self: this\n      }, `Tempo restante: ${seconds}s`);\n    }\n\n    verifySeconds(true);\n    return React.createElement(\"div\", {\n      className: \"timer_alert\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }, \"Seu tempo acabou...\", React.createElement(FcAlarmClock, {\n      className: \"alarm_clock\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }));\n  }\n\n  render() {\n    const questionIndex = this.props.questionIndex;\n    if (questionIndex === questionLength) return React.createElement(Redirect, {\n      to: \"/feedback\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    });\n    const _this$props$result = this.props.result,\n          category = _this$props$result.category,\n          question = _this$props$result.question,\n          elCorrectAnswer = _this$props$result.correct_answer,\n          incorrectAnswers = _this$props$result.incorrect_answers;\n    const _this$state = this.state,\n          seconds = _this$state.seconds,\n          clicked = _this$state.clicked;\n    return React.createElement(\"div\", {\n      className: \"card_container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      \"data-testid\": \"question-category\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    }, window.atob(category)), React.createElement(\"h2\", {\n      \"data-testid\": \"question-text\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }, window.atob(question)), React.createElement(\"button\", {\n      className: \"questions-buttons\",\n      type: \"button\",\n      id: \"correct-answer\",\n      \"data-testid\": \"correct-answer\",\n      onClick: e => this.verifyAnswers(e),\n      disabled: seconds === 0 || clicked,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    }, window.atob(elCorrectAnswer)), incorrectAnswers.map((answer, index) => React.createElement(\"button\", {\n      className: \"wrong-answers\",\n      type: \"button\",\n      \"data-testid\": `wrong-answer-${index}`,\n      key: answer,\n      onClick: e => this.verifyAnswers(e),\n      disabled: seconds === 0 || clicked,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153\n      },\n      __self: this\n    }, window.atob(answer))), this.renderTimer(seconds));\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  questionIndex: state.saveQuestions.index\n});\n\nconst mapDispatchToProps = dispatch => ({\n  saveScore: seconds => dispatch(sumScore(seconds))\n});\n\nTriviaCard.propTypes = {\n  result: PropTypes.shape({\n    category: PropTypes.string,\n    question: PropTypes.string\n  })\n}.isRequired;\nexport default connect(mapStateToProps, mapDispatchToProps)(TriviaCard);","map":{"version":3,"sources":["/home/phlopes/Projetos/sd-010-a-project-trivia-react-redux/src/components/TriviaCard.jsx"],"names":["React","Component","PropTypes","connect","Redirect","FcAlarmClock","sumScore","correctAnswer","questionLength","TriviaCard","constructor","state","seconds","clicked","decrement","bind","startTimer","stopTimer","resetTimer","updateClicked","renderTimer","componentDidMount","componentDidUpdate","prevProps","questionIndex","props","wrongAnswers","document","querySelectorAll","elCorrectAnswer","getElementById","forEach","button","classList","remove","verifyClicked","setState","previousState","interval","timer","setInterval","clearInterval","verifyAnswers","event","add","target","id","saveScore","difficulty","result","verifySeconds","render","category","question","correct_answer","incorrectAnswers","incorrect_answers","window","atob","e","map","answer","index","mapStateToProps","saveQuestions","mapDispatchToProps","dispatch","propTypes","shape","string","isRequired"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport '../styles/TriviaCard.css';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\nimport { FcAlarmClock } from 'react-icons/fc';\nimport { sumScore } from '../Redux/actions';\n\nconst correctAnswer = 'correct-answer';\nconst questionLength = 5;\n\nclass TriviaCard extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      seconds: 30,\n      clicked: false,\n    };\n\n    this.decrement = this.decrement.bind(this);\n    this.startTimer = this.startTimer.bind(this);\n    this.stopTimer = this.stopTimer.bind(this);\n    this.resetTimer = this.resetTimer.bind(this);\n    this.updateClicked = this.updateClicked.bind(this);\n    this.renderTimer = this.renderTimer.bind(this);\n  }\n\n  componentDidMount() {\n    this.startTimer();\n  }\n\n  componentDidUpdate(prevProps) {\n    const { questionIndex } = this.props;\n    if (questionIndex === questionLength) return;\n    if (prevProps !== this.props) {\n      const wrongAnswers = document.querySelectorAll('.wrong-answers');\n      const elCorrectAnswer = document.getElementById(correctAnswer);\n      wrongAnswers.forEach((button) => {\n        button.classList.remove('incorrect');\n      });\n      elCorrectAnswer.classList.remove('correct');\n\n      this.resetTimer();\n      this.stopTimer();\n      this.startTimer();\n      this.updateClicked();\n\n      const { verifyClicked } = this.props;\n      verifyClicked(false);\n    }\n  }\n\n  updateClicked() {\n    this.setState({\n      clicked: false,\n    });\n  }\n\n  resetTimer() {\n    this.setState({\n      seconds: 30,\n    });\n  }\n\n  decrement() {\n    const { seconds } = this.state;\n    if (seconds === 0) {\n      this.stopTimer();\n    } else {\n      this.setState((previousState) => ({\n        seconds: previousState.seconds - 1,\n      }));\n    }\n  }\n\n  startTimer() {\n    const interval = 1000;\n    this.timer = setInterval(this.decrement, interval);\n  }\n\n  stopTimer() {\n    clearInterval(this.timer);\n  }\n\n  verifyAnswers(event) {\n    const { verifyClicked } = this.props;\n    verifyClicked(true);\n    const wrongAnswers = document.querySelectorAll('.wrong-answers');\n    const elCorrectAnswer = document.getElementById(correctAnswer);\n    elCorrectAnswer.classList.add('correct');\n    wrongAnswers.forEach((button) => {\n      button.classList.add('incorrect');\n    });\n\n    if (event.target.id === correctAnswer) {\n      const { seconds } = this.state;\n      const {\n        saveScore,\n        result: { difficulty },\n      } = this.props;\n\n      saveScore({ seconds, difficulty });\n    }\n\n    this.setState({\n      clicked: true,\n    });\n  }\n\n  renderTimer(seconds) {\n    const { verifySeconds } = this.props;\n    if (seconds !== 0) {\n      verifySeconds(false);\n      return (<p>{`Tempo restante: ${seconds}s`}</p>);\n    }\n    verifySeconds(true);\n    return (\n      <div className=\"timer_alert\">\n        Seu tempo acabou...\n        <FcAlarmClock className=\"alarm_clock\" />\n      </div>);\n  }\n\n  render() {\n    const { questionIndex } = this.props;\n    if (questionIndex === questionLength) return <Redirect to=\"/feedback\" />;\n    const {\n      result: {\n        category,\n        question,\n        correct_answer: elCorrectAnswer,\n        incorrect_answers: incorrectAnswers,\n      },\n    } = this.props;\n    const { seconds, clicked } = this.state;\n\n    return (\n      <div className=\"card_container\">\n        <h1 data-testid=\"question-category\">{window.atob(category)}</h1>\n        <h2 data-testid=\"question-text\">{window.atob(question)}</h2>\n        <button\n          className=\"questions-buttons\"\n          type=\"button\"\n          id=\"correct-answer\"\n          data-testid=\"correct-answer\"\n          onClick={ (e) => this.verifyAnswers(e) }\n          disabled={ seconds === 0 || clicked }\n        >\n          {window.atob(elCorrectAnswer)}\n        </button>\n        {incorrectAnswers.map((answer, index) => (\n          <button\n            className=\"wrong-answers\"\n            type=\"button\"\n            data-testid={ `wrong-answer-${index}` }\n            key={ answer }\n            onClick={ (e) => this.verifyAnswers(e) }\n            disabled={ seconds === 0 || clicked }\n          >\n            {window.atob(answer)}\n          </button>\n        ))}\n\n        {this.renderTimer(seconds)}\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  questionIndex: state.saveQuestions.index,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  saveScore: (seconds) => dispatch(sumScore(seconds)),\n});\n\nTriviaCard.propTypes = {\n  result: PropTypes.shape({\n    category: PropTypes.string,\n    question: PropTypes.string,\n  }),\n}.isRequired;\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TriviaCard);\n"]},"metadata":{},"sourceType":"module"}