{"ast":null,"code":"var _jsxFileName = \"/home/phlopes/Projetos/sd-010-a-project-trivia-react-redux/src/components/TriviaCard.jsx\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport '../styles/triviaCard.css';\n\nclass TriviaCard extends Component {\n  constructor() {\n    super();\n    this.state = {\n      seconds: 5\n    };\n    this.decrement = this.decrement.bind(this);\n    this.startTimer = this.startTimer.bind(this);\n    this.stopTimer = this.stopTimer.bind(this);\n  }\n\n  componentDidMount() {\n    this.startTimer();\n  }\n\n  componentDidUpdate(prevProps) {\n    const wrongAnswers = document.querySelectorAll('.wrong-answers');\n    const correctAnswer = document.getElementById('correct-answer');\n    wrongAnswers.forEach(button => {\n      button.classList.remove('incorrect');\n    });\n    correctAnswer.classList.remove('correct');\n\n    if (prevProps.result !== this.props.result) {\n      this.setState = {\n        seconds: 5\n      };\n    }\n  }\n\n  decrement() {\n    const seconds = this.state.seconds;\n\n    if (seconds === 0) {\n      this.stopTimer();\n    } else {\n      this.setState(previousState => ({\n        seconds: previousState.seconds - 1\n      }));\n    }\n  }\n\n  startTimer() {\n    this.timer = setInterval(this.decrement, 1000);\n  }\n\n  stopTimer() {\n    clearInterval(this.timer);\n  }\n\n  verifyAnswers() {\n    const wrongAnswers = document.querySelectorAll('.wrong-answers');\n    const correctAnswer = document.getElementById('correct-answer');\n    correctAnswer.classList.add('correct');\n    wrongAnswers.forEach(button => {\n      button.classList.add('incorrect');\n    });\n  }\n\n  render() {\n    const _this$props$result = this.props.result,\n          category = _this$props$result.category,\n          question = _this$props$result.question,\n          correctAnswer = _this$props$result.correct_answer,\n          incorrectAnswers = _this$props$result.incorrect_answers;\n    const seconds = this.state.seconds;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      \"data-testid\": \"question-category\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }, category), React.createElement(\"h2\", {\n      \"data-testid\": \"question-text\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }, question), React.createElement(\"button\", {\n      className: \"questions-buttons\",\n      type: \"button\",\n      id: \"correct-answer\",\n      \"data-testid\": \"correct-answer\",\n      onClick: e => this.verifyAnswers(e),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }, correctAnswer), incorrectAnswers.map((answer, index) => React.createElement(\"button\", {\n      className: \"wrong-answers\",\n      type: \"button\",\n      \"data-testid\": `wrong-answer-${index}`,\n      key: answer,\n      onClick: e => this.verifyAnswers(e),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }, answer)), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }, seconds));\n  }\n\n}\n\nTriviaCard.propTypes = {\n  result: PropTypes.shape({\n    category: PropTypes.string,\n    question: PropTypes.string\n  })\n}.isRequired;\nexport default TriviaCard;","map":{"version":3,"sources":["/home/phlopes/Projetos/sd-010-a-project-trivia-react-redux/src/components/TriviaCard.jsx"],"names":["React","Component","PropTypes","TriviaCard","constructor","state","seconds","decrement","bind","startTimer","stopTimer","componentDidMount","componentDidUpdate","prevProps","wrongAnswers","document","querySelectorAll","correctAnswer","getElementById","forEach","button","classList","remove","result","props","setState","previousState","timer","setInterval","clearInterval","verifyAnswers","add","render","category","question","correct_answer","incorrectAnswers","incorrect_answers","e","map","answer","index","propTypes","shape","string","isRequired"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport '../styles/triviaCard.css';\n\nclass TriviaCard extends Component {\n  constructor() {\n    super()\n\n    this.state = {\n      seconds: 5,\n    }\n\n    this.decrement = this.decrement.bind(this);\n    this.startTimer = this.startTimer.bind(this)\n    this.stopTimer = this.stopTimer.bind(this)\n  }\n\n  componentDidMount() {\n    this.startTimer()\n  }\n\n  componentDidUpdate(prevProps) {\n    const wrongAnswers = document.querySelectorAll('.wrong-answers');\n    const correctAnswer = document.getElementById('correct-answer');\n    wrongAnswers.forEach((button) => {\n      button.classList.remove('incorrect');\n    });\n    correctAnswer.classList.remove('correct');\n    \n    if(prevProps.result !== this.props.result) {\n      this.setState=({\n        seconds: 5\n      })\n    }\n  }\n\n  decrement() {\n    const { seconds } = this.state;\n    if (seconds === 0) {\n      this.stopTimer()\n    } else {\n      this.setState((previousState) => ({\n        seconds: previousState.seconds - 1,\n      }))\n    }\n  }\n\n  startTimer() {\n    this.timer = setInterval(\n      this.decrement, 1000)\n  }\n\n  stopTimer() {\n    clearInterval(this.timer)\n  }\n\n  verifyAnswers() {\n    const wrongAnswers = document.querySelectorAll('.wrong-answers');\n    const correctAnswer = document.getElementById('correct-answer');\n    correctAnswer.classList.add('correct');\n    wrongAnswers.forEach((button) => {\n      button.classList.add('incorrect');\n    });\n  }\n\n  render() {\n    const {\n      result: {\n        category,\n        question,\n        correct_answer: correctAnswer,\n        incorrect_answers: incorrectAnswers,\n      },\n    } = this.props;\n    const { seconds } = this.state;\n\n    return (\n      <div>\n        <h1 data-testid=\"question-category\">{category}</h1>\n        <h2 data-testid=\"question-text\">{question}</h2>\n        <button\n          className=\"questions-buttons\"\n          type=\"button\"\n          id=\"correct-answer\"\n          data-testid=\"correct-answer\"\n          onClick={(e) => this.verifyAnswers(e)}\n        >\n          {correctAnswer}\n        </button>\n        {incorrectAnswers.map((answer, index) => (\n          <button\n            className=\"wrong-answers\"\n            type=\"button\"\n            data-testid={`wrong-answer-${index}`}\n            key={answer}\n            onClick={(e) => this.verifyAnswers(e)}\n          >\n            {answer}\n          </button>\n        ))}\n        <p>{seconds}</p>\n      </div>\n    );\n  }\n}\n\nTriviaCard.propTypes = {\n  result: PropTypes.shape({\n    category: PropTypes.string,\n    question: PropTypes.string,\n  }),\n}.isRequired;\nexport default TriviaCard;\n"]},"metadata":{},"sourceType":"module"}